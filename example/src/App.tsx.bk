import * as React from 'react';
import {
  Button,
  FlatList,
  Platform,
  PlatformColor,
  SafeAreaView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import NetworkClient from 'react-native-network-client';
import Modal from 'react-native-modal';

import CreateClientModal from './CreateClientModal';


const MakeRequestModal = ({visible, client}) => {
  const [method, setMethod] = React.useState('POST');
  const [endpoint, setEndpoint] = React.useState('/api/v4/users/login');
  const [body, setBody] = React.useState('{"device_id": "", "login_id": "migtest1", "password": "password!!!", "token": ""}');
  const [response, setResponse] = React.useState('');

  makeRequest = async () => {
    let resp;
    if (method === 'POST') {
      resp = await client.post(endpoint, JSON.parse(body));
    } else {
      resp = await client.get(endpoint);
    }

    setResponse(resp);
  }

  return (
    <Modal isVisible={visible}>
      <SafeAreaView style={styles.container}>
        <View style={styles.modalContent}>
          <TextInput
            autoCapitalize='none'
            placeholder='POST'
            value={method}
            onChangeText={setMethod}
          />
          <TextInput
            autoCapitalize='none'
            placeholder='/posts'
            value={endpoint}
            onChangeText={setEndpoint}
          />
          <TextInput
            autoCapitalize='none'
            placeholder='{userId: 1, title: "title", body: "body"}'
            value={body}
            onChangeText={setBody}
          />
          <Button
            disabled={method.length === 0}
            title='Request'
            onPress={makeRequest}
          />
          <Text>Response: {JSON.stringify(response)}</Text>
        </View>
      </SafeAreaView>
    </Modal>
  )
}

export default function App() {
  const [createClientModalVisible, setCreateClientModalVisible] = React.useState(false);
  const [requestModalVisible, setRequestModalVisible] = React.useState(false);
  const [requestClient, setRequestClient] = React.useState();
  const [clients, setClients] = React.useState([]);

  React.useEffect(() => {
    async function initClient() {
      const serverUrl = 'https://community.mattermost.com';
      const options = {
        additionalHeaders: {
          "Accept-Language": "en",
          "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148",
          "X-Requested-With": "XMLHttpRequest",
        },
      };
      const client = await NetworkClient.getOrCreateClient(serverUrl, options);
      createClient(client);
    }

    initClient();
  }, []);

  const createClient = (client) => {
    setClients((clients) => [...clients, client])
    setCreateClientModalVisible(false);
  };

  const showCreateClientModal = () => setCreateClientModalVisible(true);

  const showRequestClientModal = (client) => {
    setRequestClient(client);
    setRequestModalVisible(true);
  }

  const renderHeader = () => (
    <View style={styles.header}>
      <Button
        style={styles.addButton}
        onPress={showCreateClientModal}
        title='Add Client'
      />
    </View>
  )

  const renderItem = ({item}) => (
    <View key={item.serverUrl} style={styles.item}>
      <Text>{item.serverUrl}</Text>
      <TouchableOpacity onPress={() => showRequestClientModal(item)}>
        <Text style={styles.request}>Request</Text>
      </TouchableOpacity>
    </View>
  )

  const renderEmpty = () => (
    <View style={styles.empty}>
      <Text>No clients configured</Text>
    </View>
  )

  return (
    <SafeAreaView style={styles.container}>
      <View>
        <FlatList 
          data={clients}
          renderItem={renderItem}
          ListHeaderComponent={renderHeader}
          ListEmptyComponent={renderEmpty}
        />
      </View>
      <CreateClientModal visible={createClientModalVisible} createClient={createClient} />
      <MakeRequestModal visible={requestModalVisible} client={requestClient} />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  modalContent: {
    flex: 1,
    backgroundColor: 'white',
    padding: 10,
  },
  header: {
    flex: 1,
    alignItems: 'flex-end'
  },
  empty: {
    flex: 1,
    alignItems: 'center',
  },
  item: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 10,
  },
  request: {
    ...Platform.select({
      ios: { color: PlatformColor('label') },
      android: {
        color: PlatformColor('?attr/colorControlNormal')
      },
    }),
  }
});
